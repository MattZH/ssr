const fs = require('fs')
const express = require('express')
const path = require('path')
const resolve = file => path.resolve(__dirname, file)
const {
  createBundleRenderer
} = require('vue-server-renderer')


const server = express()

// const renderer = createBundleRenderer(serverBundle, {
//   runInNewContext: false, // 推荐
//   template, // （可选）页面模板
//   clientManifest // （可选）客户端构建 manifest
// })
function createRenderer(bundle, options) {
  return createBundleRenderer(bundle, Object.assign(options, {
    basedir: resolve('./dist'),
    runInNewContext: false
  }))
}


let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')

const isProd = process.env.NODE_ENV === 'production'

const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')

  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    server,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}


server.use('/dist', express.static('./dist'))

function render(req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'Vue HN 2.0', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

server.get('*', (req, res, next) => {
  const routers = ['/', '/foo', '/item']
  if (routers.indexOf(req.url) === -1) {
    next()
  } else {
    if(isProd){
      render(req, res)
    }else{
      readyPromise.then(() => render(req, res))
    }
  }
})

// server.get('*', (req, res, next) => {
//   const context = { url: req.url }

//   const routers = ['/', '/foo', '/item']

//   if(routers.indexOf(req.url) === -1){
//     next()
//   }else{
//     renderer.renderToString(context, (err, html) => {
//       if (err) {
//         if (err.code === 404) {
//           res.status(404).end('Page not found')
//         } else {
//           res.status(500).end('Internal Server Error')
//         }
//       } else {
//         res.end(html)
//       }
//     })
//   }

// })

server.get('/resumes', (request, response) => {
  response.json({
    code: 0,
    msg: "ok",
    data: {
      resumes: [{
          name: 'resume1',
          content: '111'
        },
        {
          name: 'resume2',
          content: '222'
        }
      ]
    }
  })
})

const port = process.env.PORT || 9000
server.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})